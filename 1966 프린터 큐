import java.util.*;
import java.lang.*;
import java.io.*;

class Main
{
	static Scanner scan = new Scanner(System.in);
    static int testcasenum = 0;
	static int amount = 0;
	static int whatfile = 0;
	static int fileimportance[][];
	static int result = 0;
	
	public static void main (String[] args) throws java.lang.Exception
	{
		testcasenum = scan.nextInt();
		
		for (int i = 0 ; i < testcasenum; i++)
		{
			arrayLength();
			whatFile();
			Importance();
			Sort();
		}
	}

	public static void arrayLength() // 길이 입력
	{
		amount = scan.nextInt();
	}

	public static void whatFile() // 찾고자 하는 파일
	{
		whatfile = scan.nextInt();
	}

	public static void Importance() // 중요도 입력
	{
		int temp[][] = new int[2][amount];
		
		for (int i  = 0 ; i < amount ; i++)
		{
			temp[0][i] = scan.nextInt();
		}
		temp[1][whatfile] = 1; // 찾고자 하는 파일의 위치
		fileimportance = temp;
	}
	

    public static void Sort() // 결과값 도출
    {
    	int queue[][] = fileimportance;
    	Integer sort[] = new Integer[amount];
    	int count = 0;
    	int length = amount;
    	int i = 0;
    	int front = 0;
    	int num = 0;
    	
    	for (i = 0; i < length ; i++) // 중요도를 내림차순으로 정렬
    	{
    		sort[i] = queue[0][i];
    	}
    	
    	Arrays.sort(sort, Collections.reverseOrder());
    	
    	while (true) // 출력값 찾기
    	{	
	    	if (front == length)
	    	{
	    		front = 0;
	    	}
	    	
	    	if (sort[num] == queue[0][front])  // 중요도가 높은순으로 없애고 count를 ++ 하고, 만약 찾고자 하는 파일의 위치와 같다면 출력하고 break;
	    	{
	    		count++;
	    		queue[0][front] = 0;
	    		num++;
	    		
	    		if(queue[1][front] == 1)
	    		{
	    			System.out.println(count);
	    			break;
	    		}
	    	}
	    	
	    	front++;
    	}
    }
}

-----------------------------------------------------------------------------

풀긴 했지만 큐로 푼 것 같지는 않아서 매우 찝찝함...

원래 하고자 했던 풀이는 queue에서 먼저 자신보다 높은 중요도가 있는지 체크하고 있다면 팝해서 뒤로 보내는 형식으로, 그리고 제일 높은 중요도가
맨 앞으로 왔다면 front를 1로 높히고 ~~~...

찾아보니 자바에서는 큐 메모리 구조를 인터페이스로 할 수 있다고 써져있어서 한번 봐야할듯...


