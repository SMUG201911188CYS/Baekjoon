#include <iostream>
#include <string>
#include <vector>
using namespace std;

/*
https://gmlwjd9405.github.io/2018/08/31/algorithm-union-find.html - 분리 집합 설명 글

분리 집합 시켜서 한바퀴 쭉 돌리고, find 해서 부모값이 진실을 아는 사람들 1빠따로 입력 받은 사람이랑 다를때만 cnt++ 해서 결과값 출력하면 끝
*/

vector<int> root; // 분리 집합
vector<int> height; // 트리 높이
vector<int> num_t; // 진실을 아는 사람의 번호들
vector<int> rep_party; // n번째 파티의 대표 참석자 번호

void reset_root(int n); // 루트 값 초기화
void get_and_process_attendants(); // 파티 참석자 입력 밑 분리 집합 적용 함수
void set_know_t_root(vector<int> know); // 진실을 아는 사람들 분리 집합 적용 합수
void result(int m, int know_t); // 결과 값 출력
void union_(int x, int y); // 분리 집합 함수
void input_t_num (int know_t); // 진실을 아는 사람의 번호를 넣는 함수
int find (int x); // 루트 값 찾기 함수


int main() {
	
	int n, m; // n = 사람 수, m = 파티 수
	int know_t; // 진실을 아는 사람의 수
	
	cin >> n >> m; // 사람 수, 파티 수 입력
	cin >> know_t; // 진실을 아는 사람 수 입력
	
	reset_root(n); // 루트 초기화
	input_t_num(know_t); // 진실을 아는 사람의 번호 입력
	
	for (int i = 0; i < m; i++) { // 파티의 수만큼 반복
		get_and_process_attendants();
	}
	
	result(m, know_t);
	
	return 0;
}

void input_t_num(int know_t) {
	int temp;
	
	if (know_t != 0) {
		for (int i = 0; i < know_t; i++) { // 진실을 아는 사람 번호 넣기
			cin >> temp;
			num_t.push_back(temp);
		}
		set_know_t_root(num_t); // 진실을 아는 사람들 분리 노트 적용
	}
}

void reset_root(int n) { 	
	for (int i = 0; i <= n; i++) { // i <= n 인 이유는 이 문제에서는 10명이 있다고 하면, 0 ~ 9 번이 아닌 1 ~ 10번 이기 때문
		root.push_back(i); // 루트 초기화
  		height.push_back(0); // 트리의 높이 초기화
	}
}

void set_know_t_root(vector<int> know) {
	
	for (int i = 0; i < know.size() - 1; i++) {
		union_(know[i], know[i+1]); // 진실을 아는 사람들만 따로 분리 집합을 해서, 진실을 아는 사람들의 루트 값을 맨 처음에 입력받은 진실을 아는 사람의 루트값으로 다 바꾸어서, 나중에 결과 값을 처리할 떄 편리하게 계산하기 위함.
	}
}

void result(int m, int know_t) {
	int cnt = 0;
	
	for(int i = 0; i < m && know_t != 0; i++) {
		if(num_t[0] != find(rep_party[i])) // 진실을 아는 사람의 번호를 입력 받을때 첫번째로 입력 받은 사람을 루트의 부모로 설정하고 분리 집합을 했기에, 첫번째 루트 값과 find한 루트 값 대조만 하면됨
			cnt++;
	}
	
	if(num_t.size() == 0) { // 만약 진실을 아는 사람들이 없다면, 모든 파티에서 거짓말을 할 수 있기에 cnt = m으로 설정
		cnt = m;
	}
	cout << cnt;
	
}

void get_and_process_attendants() { // n번째 파티에 오는 사람들의 번호를 입력받고 처리하는 함수
	vector<int> attendtants; // 참석자 입력받을 벡터
	
	int personnel; // 파티의 참석자 수
	int temp; // 임시 변수
	
	cin >> personnel;
	
	for (int i = 0; i < personnel; i++) {
		cin >> temp;
		
		if(i == 0) // 첫번째로 입력받는다면, 첫번째로 입력받는 번호를 파티의 대표 참석자로 번호를 넣음.
			rep_party.push_back(temp);
		
		attendtants.push_back(temp); // 추가
	}
	
	for (int i = 0; i < personnel - 1; i++) {
		union_(attendtants[i], attendtants[i+1]); // 분리 집합
	}
}

void union_(int x, int y) {
	int temp;
	
	x = find(x);
 	y = find(y);
	
	
   // 두 값의 root가 같으면(이미 같은 트리) 합치지 않는다.
	if(x == y)
		return;
	
	if(num_t.size() != 0 && x != num_t[0] && y == num_t[0]) { // 만약 x가 진실을 모르는 사람이고, y가 진실을 아는 사람 일 때 이대로 분리 집합을 하면 진실을 아는 사람이 진실을 모르는 사람의 루트값으로 변하기 때문에 서로 바꿔줌.
		temp = y;
		y = x;
		x = temp;
	}
		

   // "union-by-height 최적화"
   // 항상 높이가 더 낮은 트리를 높이가 높은 트리 밑에 넣는다. 즉, 높이가 더 높은 쪽을 root로 삼음
	
	if(num_t.size() != 0) { // 진실을 아는 사람의 수가 0이 아닐때, 필자가 작성한 코드일 때 이렇게 설정하지 않으면 진실을 아는 사람의 수가 0일때 오류 발생
		if(height[x] < height[y] && x != num_t[0]) { // 만약 이렇게 조건을 하지 않으면 진실을 아는 사람의 트리가 크기가 더 작아서 진실을 모르는 사람 트리로 넣어 질 수 있음. 그래서 x 가 진실을 아는 사람 일때 트리의 크기가 더 작더라도 조건 무시하고 아래 else 문으로 이동. 
			root[x] = y; // x의 root를 y로 변경
		}
		else {
			root[y] = x; // y의 root를 x로 변경
			
			if(height[x] == height[y])
				height[x]++; // 만약 높이가 같다면 합친 후 (x의 높이 + 1
		}
	}
	else { // 진실을 아는 사람의 수가 0이면 
			if(height[x] < height[y]) {
				root[x] = y; // x의 root를 y로 변경
			}
		else {
			root[y] = x; // y의 root를 x로 변경
			if(height[x] == height[y])
				height[x]++; // 만약 높이가 같다면 합친 후 (x의 높이 + 1
		}
	}
}

/* find(x): 재귀 이용 */
int find(int x) {
  	if (root[x] == x) {
    	  return x;
  	} else {
      // "경로 압축(Path Compression)"
      // find 하면서 만난 모든 값의 부모 노드를 root로 만든다.
   	   return root[x] = find(root[x]);
  	}
}
